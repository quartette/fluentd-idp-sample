# secure ログを監視
<source>
  @type tail
  format syslog
  path /var/log/secure
  tag log.secure
  pos_file /tmp/secure.pos
</source>


<match log.secure>
  @type copy
  # mackerelへ通知用
  <store>
    @type datacounter
    count_interval 60s
    count_key message
    output_per_tag yes
    pattern1 password_accepted ^Accepted password
    pattern2 password_failed ^Failed password
    pattern3 publickey_accepted ^Accepted publickey
    pattern4 publickey_failed ^Failed publickey
    pattern5 connection_close ^Connection closed
    tag_prefix count
  </store>
  # slackへ通知するメッセージにタグ付け
  <store>
    @type rewrite_tag_filter
    rewriterule1 message ^Accepted.?password slack.log.secure
    rewriterule2 message ^Failed.?password slack.log.secure
    rewriterule3 message ^Accepted.?publickey slack.log.secure
    rewriterule4 message ^Failed.?publickey slack.log.secure
    rewriterule5 message ^Connection.?closed slack.log.secure
  </store>
</match>

# 集計結果をmackerelへ
<match count.log.secure>
  @type mackerel
  api_key {{ mackerel api key }}
#  hostid {{ hostid }}
  hostid_path /var/lib/mackerel-agent/id
  metrics_name login.count.${out_key}
  out_keys password_accepted_count,password_failed_count,publickey_accepted_count,publickey_failed_count,connection_close_count
  use_zero_for_empty
  flush_interval 60s
</match>

# ログインをslackへ通知
<match slack.log.secure>
  @type slack
  webhook_url {{ webhook url }}
  channel {{ channel }}
  username {{ username }}
  icon_emoji {{ :goast: }}
  flush_interval 5s
  message_keys host,time,message
  message "[%s] [%s] %s"
</match>
